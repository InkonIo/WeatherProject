import telebot
from telebot import types
import requests
from datetime import datetime
import json
import os
from apscheduler.schedulers.background import BackgroundScheduler


BOT_TOKEN = "8431178178:AAGxroXfl2zRFAFOajRv66CJoWGa8vf6mRk"
API_KEY = "d25be7881e448482385df1a9ee215eac"

bot = telebot.TeleBot(BOT_TOKEN)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_FILE = "users_data.json"


# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò ===

def load_users():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}


def save_users(users):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, ensure_ascii=False, indent=2)


def get_user_city(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    users = load_users()
    return users.get(str(user_id), {}).get('city')


def save_user_city(user_id, city, username=None):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    users = load_users()
    users[str(user_id)] = {
        'city': city,
        'username': username,
        'registered_at': datetime.now().isoformat()
    }
    save_users(users)


# === –§–£–ù–ö–¶–ò–ò –ü–û–ì–û–î–´ (–∏–∑ —Ç–≤–æ–µ–≥–æ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è) ===

def get_weather(city):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞"""
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric&lang=ru"
        response = requests.get(url, timeout=5)
        data = response.json()

        if data.get("cod") != 200:
            return None

        return {
            "city": data["name"],
            "temp": round(data["main"]["temp"], 1),
            "feels_like": round(data["main"]["feels_like"], 1),
            "humidity": data["main"]["humidity"],
            "pressure": data["main"]["pressure"],
            "wind": round(data["wind"]["speed"], 1),
            "description": data["weather"][0]["description"],
            "icon": data["weather"][0]["icon"],
            "sunrise": datetime.fromtimestamp(data["sys"]["sunrise"]).strftime("%H:%M"),
            "sunset": datetime.fromtimestamp(data["sys"]["sunset"]).strftime("%H:%M"),
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
        return None


def get_forecast(city):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 3 –¥–Ω—è"""
    try:
        url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={API_KEY}&units=metric&lang=ru"
        response = requests.get(url, timeout=5)
        data = response.json()

        if data.get("cod") != "200":
            return []

        forecast = []
        for i in range(0, min(24, len(data["list"])), 8):
            item = data["list"][i]
            date_obj = datetime.fromtimestamp(item["dt"])

            forecast.append({
                "date": date_obj.strftime("%d.%m"),
                "temp": round(item["main"]["temp"], 1),
                "description": item["weather"][0]["description"],
                "icon": item["weather"][0]["icon"],
            })

        return forecast[:3]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        return []


def get_weather_advice(weather):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≥–æ–¥—ã (—Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    if not weather:
        return None

    temp = weather["temp"]
    description = weather["description"].lower()

    if "–¥–æ–∂–¥—å" in description or "–ª–∏–≤–µ–Ω—å" in description:
        return "‚òÇÔ∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç—å –∑–æ–Ω—Ç!"
    elif "—Å–Ω–µ–≥" in description or "–º–µ—Ç–µ–ª—å" in description:
        return "‚ùÑÔ∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ, –Ω–∞ –¥–æ—Ä–æ–≥–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫–æ–ª—å–∑–∫–æ!"
    elif temp > 30:
        return "üå°Ô∏è –û—á–µ–Ω—å –∂–∞—Ä–∫–æ! –ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã –∏ –∏–∑–±–µ–≥–∞–π—Ç–µ –ø—Ä—è–º—ã—Ö —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –ª—É—á–µ–π"
    elif temp > 25:
        return "‚òÄÔ∏è –û—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏! –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–π –∫—Ä–µ–º"
    elif temp < -10:
        return "üß• –û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ! –û–¥–µ–≤–∞–π—Ç–µ—Å—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–µ–ø–ª–æ"
    elif temp < 5:
        return "‚ùÑÔ∏è –ü—Ä–æ—Ö–ª–∞–¥–Ω–æ, –æ–¥–µ–≤–∞–π—Ç–µ—Å—å —Ç–µ–ø–ª–µ–µ!"
    elif "—Ç—É–º–∞–Ω" in description:
        return "üå´Ô∏è –¢—É–º–∞–Ω! –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö"
    elif "–≤–µ—Ç–µ—Ä" in description or weather["wind"] > 10:
        return "üí® –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä! –î–µ—Ä–∂–∏—Ç–µ –∑–æ–Ω—Ç –∫—Ä–µ–ø—á–µ"
    elif "—è—Å–Ω–æ" in description and 15 <= temp <= 25:
        return "‚ú® –ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏!"

    return None


# === –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô ===

def format_weather_message(weather, forecast=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–≥–æ–¥–æ–π"""
    if not weather:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ"

    message = f"üåç <b>{weather['city']}</b>\n\n"
    message += f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{weather['temp']}¬∞C</b>\n"
    message += f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather['feels_like']}¬∞C\n"
    message += f"üìù {weather['description'].capitalize()}\n\n"
    message += f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%\n"
    message += f"üå™ –í–µ—Ç–µ—Ä: {weather['wind']} –º/—Å\n"
    message += f"üìä –î–∞–≤–ª–µ–Ω–∏–µ: {weather['pressure']} –º–º —Ä—Ç.—Å—Ç.\n\n"
    message += f"üåÖ –†–∞—Å—Å–≤–µ—Ç: {weather['sunrise']}\n"
    message += f"üåá –ó–∞–∫–∞—Ç: {weather['sunset']}\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç
    advice = get_weather_advice(weather)
    if advice:
        message += f"\nüí° <b>–°–æ–≤–µ—Ç:</b> {advice}\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑
    if forecast:
        message += "\nüìÖ <b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è:</b>\n"
        for day in forecast:
            message += f"  ‚Ä¢ {day['date']}: {day['temp']}¬∞C, {day['description']}\n"

    return message


# === –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ===

@bot.message_handler(commands=['start'])
def start(message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    city = get_user_city(user_id)

    if city:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row("üå§ –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å", "üìÖ –ü—Ä–æ–≥–Ω–æ–∑")
        markup.row("‚öôÔ∏è –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", "‚ÑπÔ∏è –ü–æ–º–æ—â—å")

        bot.send_message(
            message.chat.id,
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n\n"
            f"–í–∞—à –≥–æ—Ä–æ–¥: <b>{city}</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup,
            parse_mode='HTML'
        )
    else:
        markup = types.ReplyKeyboardRemove()
        bot.send_message(
            message.chat.id,
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Weather Bot!\n\n"
            "üìç –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",
            reply_markup=markup,
            parse_mode='HTML'
        )
        bot.register_next_step_handler(message, register_city)


def register_city(message):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    city = message.text.strip()
    user_id = message.from_user.id
    username = message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    weather = get_weather(city)

    if weather:
        save_user_city(user_id, weather['city'], username)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row("üå§ –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å", "üìÖ –ü—Ä–æ–≥–Ω–æ–∑")
        markup.row("‚öôÔ∏è –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", "‚ÑπÔ∏è –ü–æ–º–æ—â—å")

        bot.send_message(
            message.chat.id,
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –≥–æ—Ä–æ–¥ <b>{weather['city']}</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ.\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup,
            parse_mode='HTML'
        )

        # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–≥–æ–¥—É
        show_weather(message)
    else:
        bot.send_message(
            message.chat.id,
            f"‚ùå –ì–æ—Ä–æ–¥ <b>{city}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
            parse_mode='HTML'
        )
        bot.register_next_step_handler(message, register_city)


@bot.message_handler(commands=['weather'])
def weather_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ /weather"""
    show_weather(message)


@bot.message_handler(commands=['forecast'])
def forecast_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ /forecast"""
    show_forecast(message)


@bot.message_handler(commands=['city'])
def change_city_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ /city"""
    change_city(message)


@bot.message_handler(commands=['help'])
def help_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
üìñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/weather - –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
/forecast - –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è
/city - –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 8:00

üí° <b>–°–æ–≤–µ—Ç—ã:</b>
–ë–æ—Ç –¥–∞–µ—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–≥–æ–¥—ã!
    """
    bot.send_message(message.chat.id, help_text, parse_mode='HTML')


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö ===

@bot.message_handler(func=lambda message: message.text == "üå§ –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å")
def show_weather(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É"""
    user_id = message.from_user.id
    city = get_user_city(user_id)

    if not city:
        bot.send_message(
            message.chat.id,
            "‚ùå –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return

    weather = get_weather(city)
    forecast = get_forecast(city)

    bot.send_message(
        message.chat.id,
        format_weather_message(weather, forecast),
        parse_mode='HTML'
    )


@bot.message_handler(func=lambda message: message.text == "üìÖ –ü—Ä–æ–≥–Ω–æ–∑")
def show_forecast(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"""
    user_id = message.from_user.id
    city = get_user_city(user_id)

    if not city:
        bot.send_message(
            message.chat.id,
            "‚ùå –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return

    weather = get_weather(city)
    forecast = get_forecast(city)

    if forecast:
        message_text = f"üìÖ <b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è –¥–ª—è {city}:</b>\n\n"
        for day in forecast:
            message_text += f"üìÜ {day['date']}\n"
            message_text += f"   üå° {day['temp']}¬∞C\n"
            message_text += f"   üìù {day['description'].capitalize()}\n\n"
    else:
        message_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"

    bot.send_message(message.chat.id, message_text, parse_mode='HTML')


@bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")
def change_city(message):
    """–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"""
    markup = types.ReplyKeyboardRemove()
    bot.send_message(
        message.chat.id,
        "üìç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, register_city)


@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
def help_button(message):
    """–ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏"""
    help_command(message)




def send_morning_weather():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    users = load_users()

    for user_id, user_data in users.items():
        try:
            city = user_data.get('city')
            if not city:
                continue

            weather = get_weather(city)
            forecast = get_forecast(city)

            if weather:
                message = "üåÖ <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!</b>\n\n"
                message += format_weather_message(weather, forecast)

                bot.send_message(
                    int(user_id),
                    message,
                    parse_mode='HTML'
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")



def start_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    scheduler = BackgroundScheduler()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 8:00
    scheduler.add_job(
        send_morning_weather,
        'cron',
        hour=8,
        minute=0
    )

    scheduler.start()
    print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")



if __name__ == '__main__':
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    start_scheduler()

    try:
        bot.infinity_polling()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")