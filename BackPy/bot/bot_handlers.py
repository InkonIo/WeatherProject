import telebot
from BackPy.config.settings import settings
from BackPy.app.services.user_service import UserService
from BackPy.app.services.weather_service import WeatherService
from BackPy.app.models.user import User
from functools import wraps

bot = None

def init_bot(app_instance):
    global bot
    if not settings.TELEGRAM_BOT_TOKEN:
        raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")

    bot = telebot.TeleBot(settings.TELEGRAM_BOT_TOKEN)

    # --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Flask ---
    def with_app_context(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            with app_instance.app_context():
                return func(*args, **kwargs)
        return wrapper

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –∫–æ –≤—Å–µ–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º
    bot.message_handler(commands=["start"])(with_app_context(start_handler))
    bot.message_handler(commands=["login"])(with_app_context(login_handler))
    bot.message_handler(commands=["city"])(with_app_context(city_handler))
    bot.message_handler(commands=["weather"])(with_app_context(weather_handler))
    bot.message_handler(commands=["forecast"])(with_app_context(forecast_handler))
    bot.message_handler(func=lambda message: True)(with_app_context(echo_all))

    return bot

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
def get_main_keyboard():
    from telebot import types
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("/weather", "/forecast")
    markup.row("/city", "/login")
    return markup

def start_handler(message):
    telegram_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    user = UserService.create_or_update_user(telegram_id, username, first_name)
    welcome_message = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name or username or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n\n"
        f"–Ø –±–æ—Ç MeteoSphere. –Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É –∏ –ø—Ä–æ–≥–Ω–æ–∑.\n"
        f"–í–∞—à Telegram ID: <b>{telegram_id}</b>\n\n"
        f"–î–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ –Ω–∞—à –≤–µ–±-—Å–∞–π—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login."
    )
    bot.send_message(message.chat.id, welcome_message, reply_markup=get_main_keyboard(), parse_mode='HTML')

def login_handler(message):
    telegram_id = message.from_user.id
    code = UserService.generate_auth_code_for_user(telegram_id)
    if code:
        login_message = (
            f"üîë <b>–í–∞—à 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç:</b>\n<code>{code}</code>\n"
            "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç."
        )
        bot.send_message(message.chat.id, login_message, parse_mode='HTML')
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")

def city_handler(message):
    bot.send_message(message.chat.id, "üìç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    bot.register_next_step_handler(message, set_city_step)

def set_city_step(message):
    city = message.text.strip()
    telegram_id = message.from_user.id
    weather = WeatherService.get_current_weather(city)
    if weather:
        user = UserService.get_user_by_telegram_id(telegram_id)
        if user:
            UserService.update_user_city(user.id, weather['city'])
            bot.send_message(message.chat.id, f"‚úÖ –ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{weather['city']}</b>.", parse_mode='HTML', reply_markup=get_main_keyboard())
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
    else:
        bot.send_message(message.chat.id, f"‚ùå –ì–æ—Ä–æ–¥ <b>{city}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode='HTML')
        bot.register_next_step_handler(message, set_city_step)

def weather_handler(message):
    telegram_id = message.from_user.id
    user = UserService.get_user_by_telegram_id(telegram_id)
    if not user or not user.city:
        bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥–æ—Ä–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π /city.")
        return
    full_data = WeatherService.get_full_weather_data(user.city)
    if full_data and full_data.get('weather'):
        weather = full_data['weather']
        msg = (
            f"üåç <b>{weather['city']}</b>\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{weather['temp']}¬∞C</b>\n"
            f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather['feels_like']}¬∞C\n"
            f"üìù {weather['description'].capitalize()}\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%\n"
            f"üå™ –í–µ—Ç–µ—Ä: {weather['wind']} –º/—Å\n"
            f"üìä –î–∞–≤–ª–µ–Ω–∏–µ: {weather['pressure']} –º–º —Ä—Ç.—Å—Ç.\n"
            f"üåÖ –†–∞—Å—Å–≤–µ—Ç: {weather['sunrise']}\n"
            f"üåá –ó–∞–∫–∞—Ç: {weather['sunset']}\n"
        )
        bot.send_message(message.chat.id, msg, parse_mode='HTML')
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")

def forecast_handler(message):
    telegram_id = message.from_user.id
    user = UserService.get_user_by_telegram_id(telegram_id)
    if not user or not user.city:
        bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥–æ—Ä–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π /city.")
        return
    full_data = WeatherService.get_full_weather_data(user.city)
    if full_data and full_data.get('forecast'):
        forecast = full_data['forecast']
        msg = f"üìÖ <b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è –¥–ª—è {user.city}:</b>\n"
        for day in forecast:
            msg += f"  ‚Ä¢ {day['date']}: {day['temp']}¬∞C, {day['description']}\n"
        bot.send_message(message.chat.id, msg, parse_mode='HTML')
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑.")

def echo_all(message):
    bot.send_message(message.chat.id,
                     "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, /login, /city, /weather, /forecast",
                     reply_markup=get_main_keyboard())
